Introduction
============

1. Configuration duplication
Currently we have a lot of configuration duplication, which causes several problems:

1.1. Data can be inconsistent across different configuration files
1.2. When configuring a new service, you need to know the configuration at all levels of the stack
1.3. There is no way to easily enforce naming conventions, which makes setup difficult to reverse engineer
....

2. No configuration validation
This causes problems, such as:

2.1 Troubleshooting/debugging is slow, since it requires you to run the service you are configuring to find errors in the configuration
2.2 It is difficult to see what configuration can be set
2.3 Configuration that is dead and no longer takes effect can easily pollute configuration files, and is difficult to find
....

3. Proposed solution
=================

Components:
3.1 Validation
3.1.1 We need to come up with a meta description of our configs, like xsd's for xml - something that defines the allowed/required fields/parameters etc
3.1.2 We need to make sure our tools respect/adhere to this validation mechanism
3.1.3 We need unit tests and a C.I. that validate our configs
3.1.4 Systems need to run validation checks on startup, and fail if there are configuration errors

3.2 Abstraction of logical configuration layers
3.2.1 We need to define orthoganal concepts independently. For example, We should only define each config setting in a single place - be it hg top-level url, name of an ssh key, whether a product is enabled on a branch, the location of the ftp server in production, etc - once and once only
3.2.2 We need a place to store config such that any application can use config settings from it, to really allow that config is defined in only one place. This could be a centralised web service, or a git/hg repo, or a database somewhere, or some flat files on ftp, ...
3.2.3 We need a configuration inheritence mechanism. For example, let's say we define that our hg repo is on server hg.mozilla.org, and the user to use for staging builds is stage-ffxbld - we should have a way to say that the compare-locales repository is located at https://<hg server>/users/<stage user>/compare-locales - for example. In other words, the hg server is not duplicated, and nor is the stage user duplicated - the new config setting is built up from existing "higher level" configs.
3.3 Dynamic building of config
3.3.1 We need a way to be able to build config on the fly - not all config should be centrally stored and generated up-front - for example, imagine we want to run vcs sync for a given list of repos. There will be a bunch of config that needs to be generated to represent this, but we want to be able to build this on the fly - for example, not defining fixed lists of config properites per repo - instead, have something that reads in higher level config, and generates "lower level" config that it needs. It could be that a different service lower down the chain then needs this generated config to define some even lower level config setting.

3.4 Consistent and transparant logging/output of config

3.5 We should try to separate generated config definitions from non-generated config, at least so that it should be obvious if you are setting up a new service, it is clear what data is required, and what is automatically deduced. In the case that config is generated, we should try to isolate the config generation clearly. A possibility for this is that each config requires a set of properties, which it will inline-replace in a given .ini file. The ini file would contain the config generation steps, frozen configs, etc. It should be the case that any other app/service that requires access to the config setting, can generate it from the same ini file / formula defined in some central location, so that the formula does not need to be duplicated - or the final generated values are published somewhere so that some other service that requires them, can generate it.

3.6 Every service basically needs to work out what the minimum set of orthogonal data is that it needs as input, in order to generate the configs it needs. For example, if you have a build that runs in staging, and you want to enable it in production, setting a boolean somewhere should be sufficient. All the config that is required for this service should be generated from other frozen config (such as production ftp location, production ssh keys, ...) which automatically cascade down. It should not be that you need to define anything at this level other than setting an enabled flag, for all related and integrated services to automatically pick up all the config they require.

It is also the case that if you change one config setting, regardless of which level in the architecture stack it exists in, it should immediately change this setting for everything. An example - if the hg server suddenly changes one day from hg.mozilla.org to mercurial.mozilla.org - changing a single setting (the hg url) should be sufficient to migrate the config of all systems to the new setting.

